set.seed(42)
ref=dag2ref(dag)
N=c(200,5)
I=list(numeric(0),c(4))
x=simul_gbn(ref$m,ref$sigma,ref$W,N,I)
global=compute_global(x,N,I)
fit=mc3_gbn()
unique_post=unique(fit$post)
cpdag=vector(length(unique_post),mode="list")
post_cpdag=rep(NA,length(unique_post))
for (i in 1:length(unique_post)) {
idx=which(fit$post==unique_post[i])
post_cpdag[i]=sum(fit$post[idx])
cpdag[[i]]=names(idx)
}
idx=sort(post_cpdag,decreasing=TRUE,index.return=TRUE)$ix
cpdag=cpdag[idx]
post_cpdag=post_cpdag[idx]
cpdag[1:5]
post_cpdag[1:5]
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
for (i in 2:length(fit$post)) {
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
idx=sapply(post_rep,function(z)is_mec(z,dag,I))
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
}
post2=sapply(post_cpdag,sum)
names(post2)=sapply(post_rep,dag2str)
idx=sort(post2,decreasing=TRUE,index.return=TRUE)$ix
post2=post2[idx]
post_cpdag=post_cpdag[idx]
post_cpdag
post_cpdag[1:5]
post2[1:5]
unique_post=unique(fit$post)
cpdag=vector(length(unique_post),mode="list")
post_cpdag=rep(NA,length(unique_post))
for (i in 1:length(unique_post)) {
idx=which(fit$post==unique_post[i])
post_cpdag[i]=sum(fit$post[idx])
cpdag[[i]]=names(idx)
}
idx=sort(post_cpdag,decreasing=TRUE,index.return=TRUE)$ix
cpdag=cpdag[idx]
post_cpdag=post_cpdag[idx]
cpdag[1:5]
post_cpdag[1:5]
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
for (i in 2:length(fit$post)) {
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
idx=sapply(post_rep,function(z)is_mec(z,dag,I))
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
}
post2=sapply(post_cpdag,sum)
names(post2)=sapply(post_rep,dag2str)
idx=sort(post2,decreasing=TRUE,index.return=TRUE)$ix
post2=post2[idx]
post_cpdag=post_cpdag[idx]
post_cpdag
post_cpdag[1:5]
sapply(post_cpdag,function(z) z[[1]])
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
for (i in 2:length(fit$post)) {
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx1=abs(fit$post[i]-post_prob)<1e-10
idx=rep(FALSE,length(post_rep))
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
}
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
i=2
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx1=abs(fit$post[i]-post_prob)<1e-10
idx1
post_rep
idx=rep(FALSE,length(post_rep))
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx2
idx1
idx[idx1]=idx2
idx
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
i=3
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx1=abs(fit$post[i]-post_prob)<1e-10
idx=rep(FALSE,length(post_rep))
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
idx
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
i=3
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx1=abs(fit$post[i]-post_prob)<1e-10
idx=rep(FALSE,length(post_rep))
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
i=4
dag=bn(c(),1,2,2)
set.seed(42)
ref=dag2ref(dag)
N=c(200,5)
I=list(numeric(0),c(4))
x=simul_gbn(ref$m,ref$sigma,ref$W,N,I)
global=compute_global(x,N,I)
fit=mc3_gbn()
# # rounding issues
# unique_post=unique(fit$post)
# cpdag=vector(length(unique_post),mode="list")
# post_cpdag=rep(NA,length(unique_post))
# for (i in 1:length(unique_post)) {
#   idx=which(fit$post==unique_post[i])
#   post_cpdag[i]=sum(fit$post[idx])
#   cpdag[[i]]=names(idx)
# }
# idx=sort(post_cpdag,decreasing=TRUE,index.return=TRUE)$ix
# cpdag=cpdag[idx]
# post_cpdag=post_cpdag[idx]
#
# cpdag[1:5]
# post_cpdag[1:5]
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
for (i in 2:length(fit$post)) {
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx1=abs(fit$post[i]-post_prob)<1e-10
idx=rep(FALSE,length(post_rep))
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
}
post2=sapply(post_cpdag,sum)
names(post2)=sapply(post_rep,dag2str)
idx=sort(post2,decreasing=TRUE,index.return=TRUE)$ix
post2=post2[idx]
post_cpdag=post_cpdag[idx]
plot(cumsum(sort(post2,decreasing=TRUE)))
i=4
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx1=abs(fit$post[i]-post_prob)<1e-10
idx=rep(FALSE,length(post_rep))
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
idx
idx1
post_prob
post_rep
dag
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
for (i in 2:length(fit$post)) {
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx=rep(FALSE,length(post_rep))
idx1=abs(fit$post[i]-post_prob)<1e-10
if (sum(idx1)>0) {
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
}
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
}
post_cpdag
post2=sapply(post_cpdag,sum)
names(post2)=sapply(post_rep,dag2str)
idx=sort(post2,decreasing=TRUE,index.return=TRUE)$ix
post2=post2[idx]
post_cpdag=post_cpdag[idx]
post2[1:5]
post_cpdag[1:5]
post_cpdag[1:3]
dag=bn(c(),1,2,2)
set.seed(42)
ref=dag2ref(dag)
N=c(200,5)
I=list(numeric(0),c(4))
x=simul_gbn(ref$m,ref$sigma,ref$W,N,I)
global=compute_global(x,N,I)
fit=mc3_gbn()
# # rounding issues
# unique_post=unique(fit$post)
# cpdag=vector(length(unique_post),mode="list")
# post_cpdag=rep(NA,length(unique_post))
# for (i in 1:length(unique_post)) {
#   idx=which(fit$post==unique_post[i])
#   post_cpdag[i]=sum(fit$post[idx])
#   cpdag[[i]]=names(idx)
# }
# idx=sort(post_cpdag,decreasing=TRUE,index.return=TRUE)$ix
# cpdag=cpdag[idx]
# post_cpdag=post_cpdag[idx]
#
# cpdag[1:5]
# post_cpdag[1:5]
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
for (i in 2:length(fit$post)) {
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx=rep(FALSE,length(post_rep))
# test MEC only for dag with very similar probability
idx1=abs(fit$post[i]-post_prob)<1e-10
if (sum(idx1)>0) {
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
}
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
}
post2=sapply(post_cpdag,sum)
names(post2)=sapply(post_rep,dag2str)
idx=sort(post2,decreasing=TRUE,index.return=TRUE)$ix
post2=post2[idx]
post_cpdag=post_cpdag[idx]
post2[1:3]
post_cpdag[1:3]
dag=bn(c(),1,2,2,3,4,5)
set.seed(42)
ref=dag2ref(dag)
N=c(200,5)
I=list(numeric(0),c(4))
x=simul_gbn(ref$m,ref$sigma,ref$W,N,I)
global=compute_global(x,N,I)
fit=mc3_gbn()
post_cpdag=list(fit$post[1])
post_rep=list(str2dag(names(fit$post[1])))
for (i in 2:length(fit$post)) {
cat("i=",i,"\n")
dag=str2dag(names(fit$post[i]))
post_prob=sapply(post_cpdag,function(z) z[[1]])
idx=rep(FALSE,length(post_rep))
# test MEC only for dag with very similar probability
idx1=abs(fit$post[i]-post_prob)<1e-10
if (sum(idx1)>0) {
idx2=sapply(post_rep[idx1],function(z)is_mec(z,dag,I))
idx[idx1]=idx2
}
if (sum(idx)==0) {
post_cpdag=c(post_cpdag,list(fit$post[i]))
post_rep=c(post_rep,list(str2dag(names(fit$post[i]))))
} else {
post_cpdag[[which(idx)]]=c(post_cpdag[[which(idx)]],fit$post[i])
}
}
post2=sapply(post_cpdag,sum)
names(post2)=sapply(post_rep,dag2str)
idx=sort(post2,decreasing=TRUE,index.return=TRUE)$ix
post2=post2[idx]
post_cpdag=post_cpdag[idx]
post2[1:3]
post_cpdag[1:3]
# Data simulation
P <- 4
n <- 3000
PI <- matrix(data=0,ncol=P,nrow=P)
diag(PI) <- 1
PI[1,1] <- 0
PI[1,2] <- 0.97
PI[1,3] <- 0.03
PI[2,2] <- 0.78
PI[2,1] <- 0.02
# PI[1,2] <- 1
# PI[1,3] <- 0
# PI[2,2] <- 0.8
# PI[2,1] <- 0
PI[2,4] <- 0.2
PI[4,4] <- 0.8
PI[4,3] <- 0.2
PI[3,3] <- 0.5
PI[3,1] <- 0.5
Y <- numeric(n)
Y[1] <- 1
for(i in 2:n){
Y[i] <- which.max(rmultinom(1,1,prob=PI[Y[i-1],]))
}
plot(Y)
hist(Y,breaks=seq(0,4,1))
Y
PIest <- matrix(data=0,ncol=P,nrow=P)
Nct <- matrix(data=0,ncol=P,nrow=P)
for(a in 1:P){
for(b in 1:P){
Nct[a,b] <- length(which((Y[-n]==a)&(Y[-1]==b)))
}
PIest[a,] <- Nct[a,]/sum(Y==a)
}
PIest
# Data simulation
P <- 4
n <- 3000
PI <- matrix(data=0.05,ncol=P,nrow=P)
diag(PI) <- 1
PI[1,1] <- 0
PI[1,2] <- 0.97
PI[1,3] <- 0.03
PI[2,2] <- 0.78
PI[2,1] <- 0.02
# PI[1,2] <- 1
# PI[1,3] <- 0
# PI[2,2] <- 0.8
# PI[2,1] <- 0
PI[2,4] <- 0.2
PI[4,4] <- 0.8
PI[4,3] <- 0.2
PI[3,3] <- 0.5
PI[3,1] <- 0.5
PI=PI/apply(PI,1,sum)
Y <- numeric(n)
Y[1] <- 1
for(i in 2:n){
Y[i] <- which.max(rmultinom(1,1,prob=PI[Y[i-1],]))
}
plot(Y)
hist(Y,breaks=seq(0,4,1))
PIest <- matrix(data=0,ncol=P,nrow=P)
Nct <- matrix(data=0,ncol=P,nrow=P)
for(a in 1:P){
for(b in 1:P){
Nct[a,b] <- length(which((Y[-n]==a)&(Y[-1]==b)))
}
PIest[a,] <- Nct[a,]/sum(Y==a)
}
PIest
P <- 4
n <- 3000
PI <- matrix(data=0.05,ncol=P,nrow=P)
diag(PI) <- 1
PI[1,2] <- 0.97
PI[1,3] <- 0.03
PI[2,2] <- 0.78
PI[2,1] <- 0.02
# PI[1,2] <- 1
# PI[1,3] <- 0
# PI[2,2] <- 0.8
# PI[2,1] <- 0
PI[2,4] <- 0.2
PI[4,4] <- 0.8
PI[4,3] <- 0.2
PI[3,3] <- 0.5
PI[3,1] <- 0.5
PI=PI/apply(PI,1,sum)
Y <- numeric(n)
Y[1] <- 1
for(i in 2:n){
Y[i] <- which.max(rmultinom(1,1,prob=PI[Y[i-1],]))
}
plot(Y)
hist(Y,breaks=seq(0,4,1))
# Raw estimation
PIest <- matrix(data=0,ncol=P,nrow=P)
Nct <- matrix(data=0,ncol=P,nrow=P)
for(a in 1:P){
for(b in 1:P){
Nct[a,b] <- length(which((Y[-n]==a)&(Y[-1]==b)))
}
PIest[a,] <- Nct[a,]/sum(Y==a)
}
PIest
# Data simulation
P <- 4
n <- 3000
PI <- matrix(data=0.01,ncol=P,nrow=P)
diag(PI) <- 1
PI[1,2] <- 0.97
PI[1,3] <- 0.03
PI[2,2] <- 0.78
PI[2,1] <- 0.02
# PI[1,2] <- 1
# PI[1,3] <- 0
# PI[2,2] <- 0.8
# PI[2,1] <- 0
PI[2,4] <- 0.2
PI[4,4] <- 0.8
PI[4,3] <- 0.2
PI[3,3] <- 0.5
PI[3,1] <- 0.5
PI=PI/apply(PI,1,sum)
Y <- numeric(n)
Y[1] <- 1
for(i in 2:n){
Y[i] <- which.max(rmultinom(1,1,prob=PI[Y[i-1],]))
}
plot(Y)
hist(Y,breaks=seq(0,4,1))
# Raw estimation
PIest <- matrix(data=0,ncol=P,nrow=P)
Nct <- matrix(data=0,ncol=P,nrow=P)
for(a in 1:P){
for(b in 1:P){
Nct[a,b] <- length(which((Y[-n]==a)&(Y[-1]==b)))
}
PIest[a,] <- Nct[a,]/sum(Y==a)
}
PIest
# AR estimation
delta=1e-5
pen <- 10
PIest <- matrix(data=1/P,ncol=P,nrow=P)
w <- matrix(data=0,ncol=P,nrow=P)
# lam <- table(Y)
lam <- rep(20,4)
Nit <- 10
for(it in 1:Nit){
for(a in 1:P){w[a,] <- 1/(PIest[a,]^2+delta^2)}
# Fonction non contractante :
# si petit Lambda0, converge vers 0
# si grand, vers +Inf
LAM <-matrix(data=NA,ncol=P,nrow=100)
for(i in 1:100){
LAM[i,] <- lam
for(a in 1:P){
lam[a] <- 1/sum(
(-1+sqrt(1+4*pen*w[a,]*Nct[a,]/lam[a]^2))/(2*pen*w[a,])
)
}
}
matplot((LAM))
for(a in 1:P){for(b in 1:P){
PIest[a,b] <- (-lam[a]+sqrt(lam[a]^2+4*pen*w[a,b]*Nct[a,b]))/(2*pen*w[a,b])
}}
PIest
}
PIest
Nct
PIest <- matrix(data=0,ncol=P,nrow=P)
Nct <- matrix(data=0,ncol=P,nrow=P)
for(a in 1:P){
for(b in 1:P){
Nct[a,b] <- length(which((Y[-n]==a)&(Y[-1]==b)))
}
PIest[a,] <- Nct[a,]/sum(Y==a)
}
PIest
Nct
fobj=function(lambdaj) {
sum(-lambdaj+sqrt(lambdaj^2+Nct[1,]))-1
}
uniroot(fobj,interval=c(0,10))
uniroot(fobj,interval=c(-10,10))
fobj(0)
fobj(0.1)
fobj(20)
fobj(sum(N))
fobj(sum(N[1,]))
fobj(sum(N[1,]))
fobj(sum(Nct[1,]))
sum(Nct[1,])
uniroot(fobj,interval=c(0,sum(Nct[1,])))
opt=uniroot(fobj,interval=c(0,sum(Nct[1,])))
opt
opt$root
-lambdaj+sqrt(lambdaj^2+Nct[1,]))
-lambdaj+sqrt(lambdaj^2+Nct[1,])
lambdaj=opt$root
-lambdaj+sqrt(lambdaj^2+Nct[1,])
PIest
